datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  NOT_MENTIONED
  MALE
  FEMALE
  OTHER
}

enum RelationshipStatus {
  NOT_MENTIONED
  SINGLE
  MARRIED
  ENGAGED
  IN_A_RELATIONSHIP
}

enum Role {
  USER
  ADMIN
}

model User {
  id                     String              @id @default(cuid())
  userName               String              @unique
  email                  String              @unique
  name                   String?
  image                  String?
  fullName               String?
  emailVerified          DateTime?
  password               String?
  accounts               Account[]
  sessions               Session[]
  bio                    String              @default("")
  role                   Role                @default(USER)
  relationship           RelationshipStatus? @default(NOT_MENTIONED)
  gender                 Gender?             @default(NOT_MENTIONED)
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follower[]          @relation("UserFollowers")
  following              Follower[]          @relation("UserFollowings")
  followersCount         Int                 @default(0)
  followingCount         Int                 @default(0)
  followRequestsSent     FollowRequest[]     @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[]     @relation("FollowRequestsReceived")
  blockedUsers           Block[]             @relation("UserBlocks")
  blockedBy              Block[]             @relation("UserBlockedBy")
  // Optional for WebAuthn support
  Authenticator          Authenticator[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Follower      Follower[]
  FollowRequest FollowRequest[]

  @@unique([userName, email])
  @@index([userName])
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id            String      @id @default(cuid())
  content       String      @default("")
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  tags          Tag[]
  likes         Like[]
  comments      Comment[]
  images        PostImage[]
  likesCount    Int         @default(0)
  commentsCount Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String?
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  postedBy  User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  Like      Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Follower {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@unique([followerId, followingId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id        String   @id @default(cuid())
  url       String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowRequest {
  id         String   @id @default(cuid())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(cuid())
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("UserBlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}
