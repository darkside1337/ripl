datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  NOT_MENTIONED
  MALE
  FEMALE
  OTHER
}

enum RelationshipStatus {
  NOT_MENTIONED
  SINGLE
  MARRIED
  ENGAGED
  IN_A_RELATIONSHIP
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  MIXED_MEDIA
  POLL
  REPOST
  QUOTE
}

enum Visibility {
  PUBLIC
  FOLLOWERS
  MENTIONED
}

enum ReplySettings {
  EVERYONE
  FOLLOWERS
  MENTIONED
}

enum MediaType {
  IMAGE
  VIDEO
}

model User {
  // Base
  id            String              @id @default(cuid())
  userName      String              @unique
  email         String              @unique
  image         String?
  fullName      String?
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  sessions      Session[]
  bio           String              @default("")
  role          Role                @default(USER)
  relationship  RelationshipStatus? @default(NOT_MENTIONED)
  gender        Gender?             @default(NOT_MENTIONED)

  // Post relationships

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  mentionedInPosts Post[]       @relation("PostMentions")
  pollVotes        PollOption[] @relation("PollVotes")

  // social relationships 

  followers              Follower[]      @relation("UserFollowers")
  following              Follower[]      @relation("UserFollowings")
  followersCount         Int             @default(0)
  followingCount         Int             @default(0)
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blockedUsers           Block[]         @relation("UserBlocks")
  blockedBy              Block[]         @relation("UserBlockedBy")
  // Optional for WebAuthn support
  Authenticator          Authenticator[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Follower      Follower[]
  FollowRequest FollowRequest[]

  @@index([userName])
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id       String   @id @default(cuid())
  type     PostType @default(TEXT)
  content  String   @default("")
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // Metrics
  likesCount    Int @default(0)
  repostsCount  Int @default(0)
  quotesCount   Int @default(0)
  commentsCount Int @default(0)

  // Visibility and reply settings
  visibility    Visibility    @default(PUBLIC)
  replySettings ReplySettings @default(EVERYONE)

  // Related entities
  tags     Tag[]
  mentions User[]    @relation("PostMentions")
  likes    Like[]
  comments Comment[]
  media    Media[]

  // For replies and threads
  inReplyToPost   Post?   @relation("PostReplies", fields: [inReplyToPostId], references: [id], onDelete: SetNull)
  inReplyToPostId String?
  replies         Post[]  @relation("PostReplies")

  threadRoot   Post?   @relation("ThreadPosts", fields: [threadRootId], references: [id], onDelete: SetNull)
  threadRootId String?
  threadPosts  Post[]  @relation("ThreadPosts")

  // For reposts and quotes
  originalPost   Post?   @relation("Reposts", fields: [originalPostId], references: [id], onDelete: SetNull)
  originalPostId String?
  reposts        Post[]  @relation("Reposts")

  // For poll posts
  poll Poll?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([inReplyToPostId])
  @@index([threadRootId])
  @@index([originalPostId])
  @@index([type])
  @@index([createdAt])
}

model Media {
  id           String    @id @default(cuid())
  type         MediaType
  url          String
  thumbnailUrl String?
  width        Int?
  height       Int?
  position     Int       @default(0)
  altText      String? // For accessibility
  duration     Int? // For videos (in seconds)

  // Relation to post
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id               String   @id @default(cuid())
  expiresAt        DateTime
  isMultipleChoice Boolean  @default(false)
  totalVotes       Int      @default(0)

  // Relation to post
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @unique // One-to-one relationship

  // Poll options
  options PollOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PollOption {
  id    String @id @default(cuid())
  text  String
  votes Int    @default(0)

  // Relation to poll
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String

  // Relation to users who voted (optional)
  voters User[] @relation("PollVotes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pollId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postedBy  User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  likes     Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Follower {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@unique([followerId, followingId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FollowRequest {
  id         String   @id @default(cuid())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(cuid())
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("UserBlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}
